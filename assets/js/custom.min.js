document.addEventListener("DOMContentLoaded", () => {
	const e = document.getElementById("date-now"),
		t = () => {
			const t = new Date();
			e.textContent = t.toLocaleString("en-PH", {
				dateStyle: "full",
				timeStyle: "medium",
			});
		};
	t(), setInterval(t, 1e3);
});
const getRemainingOverallWallet = () => {
		fetch("api.php?action=get_overall_remaining_wallets")
			.then((e) => e.json())
			.then((e) => {
				e.success
					? (document.getElementById(
							"remaining_overall_card"
					  ).textContent = `₱${e.data.remaining_overall}`)
					: console.error(
							"Failed to fetch remaining overall wallet:",
							e.message
					  );
			})
			.catch((e) => {
				console.error("Error fetching remaining overall wallet:", e);
			});
	},
	getRemainingCashWallet = () => {
		fetch("api.php?action=get_remaining_cash_wallet")
			.then((e) => e.json())
			.then((e) => {
				e.success
					? ((document.getElementById(
							"remaining_cash"
					  ).textContent = `₱${e.data.remaining_cash}`),
					  (document.getElementById(
							"remaining_cash_card"
					  ).textContent = `₱${e.data.remaining_cash}`))
					: console.error("Failed to fetch remaining cash wallet:", e.message);
			})
			.catch((e) => {
				console.error("Error fetching remaining cash wallet:", e);
			});
	},
	getRemainingGcashWallet = () => {
		fetch("api.php?action=get_remaining_gcash_wallet")
			.then((e) => e.json())
			.then((e) => {
				e.success
					? ((document.getElementById(
							"remaining_gcash"
					  ).textContent = `₱${e.data.remaining_gcash}`),
					  (document.getElementById(
							"remaining_gcash_card"
					  ).textContent = `₱${e.data.remaining_gcash}`))
					: console.error("Failed to fetch remaining GCash wallet:", e.message);
			})
			.catch((e) => {
				console.error("Error fetching remaining GCash wallet:", e);
			});
	},
	initializeWallets = () => {
		getRemainingOverallWallet(),
			getRemainingCashWallet(),
			getRemainingGcashWallet();
	};
initializeWallets();
const refillGCashBalance = document.getElementById("refillGCashBalance"),
	remainingGcashWalletModal = new bootstrap.Modal(
		document.getElementById("remainingGcashWalletModal")
	);
refillGCashBalance.addEventListener("submit", (e) => {
	e.preventDefault();
	const t = document.getElementById("remaining_gcash_wallet").value.trim();
	const n = new FormData(refillGCashBalance);
	n.append("remaining_gcash_wallet", t),
		fetch("api.php?action=set_remaining_gcash_wallet", {
			method: "POST",
			body: n,
		})
			.then((e) => e.json())
			.then((e) => {
				if (
					(document.querySelectorAll(".is-invalid").forEach((e) => {
						e.classList.remove("is-invalid"),
							(e.nextElementSibling.textContent = "");
					}),
					e.success)
				)
					remainingGcashWalletModal.hide(),
						(document.getElementById("remaining_gcash_wallet").value = ""),
						fetchTransactions(),
						initializeWallets(),
						(document.getElementById("toastMessage").textContent = e.message),
						toastBootstrap.show();
				else {
					const t = e.data?.errors;
					t &&
						"object" == typeof t &&
						Object.entries(t).forEach(([e, t]) => {
							const n = document.getElementById(e);
							n &&
								(n.classList.add("is-invalid"),
								(n.nextElementSibling.textContent = t));
						});
				}
			})
			.catch((e) => {
				console.error("Error setting GCash balance:", e);
			});
});
const refillCashBalance = document.getElementById("refillCashBalance"),
	remainingCashWalletModal = new bootstrap.Modal(
		document.getElementById("remainingCashWalletModal")
	);
refillCashBalance.addEventListener("submit", (e) => {
	e.preventDefault();
	const t = document.getElementById("remaining_cash_wallet").value.trim();
	const n = new FormData(refillCashBalance);
	n.append("remaining_cash_wallet", t),
		fetch("api.php?action=set_remaining_cash_wallet", {
			method: "POST",
			body: n,
		})
			.then((e) => e.json())
			.then((e) => {
				if (
					(document.querySelectorAll(".is-invalid").forEach((e) => {
						e.classList.remove("is-invalid"),
							(e.nextElementSibling.textContent = "");
					}),
					e.success)
				)
					remainingCashWalletModal.hide(),
						(document.getElementById("remaining_cash_wallet").value = ""),
						fetchTransactions(),
						initializeWallets(),
						(document.getElementById("toastMessage").textContent = e.message),
						toastBootstrap.show();
				else {
					const t = e.data?.errors;
					t &&
						"object" == typeof t &&
						Object.entries(t).forEach(([e, t]) => {
							const n = document.getElementById(e);
							n &&
								(n.classList.add("is-invalid"),
								(n.nextElementSibling.textContent = t));
						});
				}
			})
			.catch((e) => {
				console.error("Error setting cash balance:", e);
			});
});
const storeNewTransaction = document.getElementById("storeNewTransaction"),
	newTransactionModal = new bootstrap.Modal(
		document.getElementById("newTransactionModal")
	),
	toastBootstrap = bootstrap.Toast.getOrCreateInstance(
		document.getElementById("liveToast")
	),
	downloadPdf = document.getElementById("download_pdf");
storeNewTransaction.addEventListener("submit", (e) => {
	e.preventDefault();
	const t = document.getElementById("reference").value.trim(),
		n = document.getElementById("amount").value.trim(),
		a = document.getElementById("type").value,
		o = new FormData(storeNewTransaction);
	o.append("reference", t),
		o.append("amount", n),
		o.append("type", a),
		fetch("api.php?action=cash_in_out", { method: "POST", body: o })
			.then((e) => e.json())
			.then((e) => {
				if (
					(document.querySelectorAll(".is-invalid").forEach((e) => {
						e.classList.remove("is-invalid"),
							(e.nextElementSibling.textContent = "");
					}),
					e.success)
				)
					newTransactionModal.hide(),
						(document.getElementById("reference").value = ""),
						(document.getElementById("amount").value = ""),
						(document.getElementById("type").value = ""),
						fetchTransactions(),
						getRemainingOverallWallet(),
						getRemainingCashWallet(),
						getRemainingGcashWallet(),
						(document.getElementById("toastMessage").textContent = e.message),
						toastBootstrap.show();
				else {
					const t = e.data?.errors;
					t &&
						"object" == typeof t &&
						Object.entries(t).forEach(([e, t]) => {
							const n = document.getElementById(e);
							n &&
								(n.classList.add("is-invalid"),
								(n.nextElementSibling.textContent = t));
						});
				}
			})
			.catch((e) => {
				console.error("Error processing transaction:", e);
			});
});
const fetchTransactions = () => {
		const e = new URLSearchParams(window.location.search).get("page") || 1;
		fetch("api.php?action=get_transactions&page=" + e)
			.then((e) => e.json())
			.then((t) => {
				if (t.success) {
					if (t.data.total_pages < e && t.data.total_pages > 0)
						return void (window.location.href = "?page=" + t.data.total_pages);
					const n = document.querySelector(".pagination-footer"),
						a = document.querySelector("table tbody");
					if (((a.innerHTML = ""), 0 == t.data.transactions.length))
						return (
							(a.innerHTML =
								'<tr><td colspan="6" class="text-center">No transactions found.</td></tr>'),
							void n.classList.add("d-none")
						);
					n.classList.remove("d-none"),
						t.data.transactions.forEach((e) => {
							const t = document.createElement("tr");
							(t.innerHTML = `<td><span class="badge rounded-pill text-bg-${e.type_color}">${e.type}</span></td><td>${e.created_at}</td><td>${e.reference}</td><td>₱${e.amount}</td><td>₱${e.remaining_gcash_amount}</td><td>₱${e.remaining_cash_amount}</td>`),
								a.appendChild(t);
						}),
						fetchPagination(t.data.total_pages, t.data.current_page),
						(document.getElementById(
							"total-count"
						).textContent = `Total Transactions: ${t.data.total_count}`),
						(document.getElementById(
							"current-page"
						).textContent = ` | Page ${t.data.current_page} of ${t.data.total_pages}`);
				}
			})
			.catch((e) => {
				console.error("Error fetching transactions:", e),
					(document.querySelector("table tbody").innerHTML =
						'<tr><td colspan="4" class="text-center">Failed to load transactions.</td></tr>');
			});
	},
	fetchPagination = (e, t) => {
		const n = document.querySelector(".pagination");
		n.innerHTML = "";
		const a = Math.max(2, t - 2),
			o = Math.min(e - 1, t + 2),
			l = document.createElement("li");
		(l.className = "page-item" + (1 === t ? " disabled" : "")),
			(l.innerHTML = `<a class="page-link" href="?page=${
				t - 1
			}">&laquo; Previous</a>`),
			n.appendChild(l),
			i(1, t),
			a > 2 && c();
		for (let e = a; e <= o; e++) i(e, t);
		o < e - 1 && c(), e > 1 && i(e, t);
		const s = document.createElement("li");
		function i(e, t) {
			const a = document.createElement("li");
			(a.className = "page-item" + (e === t ? " active" : "")),
				(a.innerHTML = `<a class="page-link" href="?page=${e}">${e}</a>`),
				n.appendChild(a);
		}
		function c() {
			const e = document.createElement("li");
			(e.className = "page-item disabled"),
				(e.innerHTML = '<span class="page-link">...</span>'),
				n.appendChild(e);
		}
		(s.className = "page-item" + (t === e ? " disabled" : "")),
			(s.innerHTML = `<a class="page-link" href="?page=${
				t + 1
			}">Next &raquo;</a>`),
			n.appendChild(s);
	};
fetchTransactions(),
	downloadPdf.addEventListener("click", async () => {
		try {
			const e = await fetch("api.php?action=download_transactions"),
				t = await e.json();
			if (!t.success)
				return (
					(document.getElementById("toastMessage").textContent = t.message),
					void toastBootstrap.show()
				);
			const n = atob(t.data.pdf_content),
				a = new Array(n.length);
			for (let e = 0; e < n.length; e++) a[e] = n.charCodeAt(e);
			const o = new Uint8Array(a),
				l = new Blob([o], { type: "application/pdf" }),
				s = document.createElement("a");
			(s.href = window.URL.createObjectURL(l)),
				(s.download = "transactions.pdf"),
				document.body.appendChild(s),
				s.click(),
				document.body.removeChild(s),
				window.URL.revokeObjectURL(s.href);
		} catch (e) {
			console.error("Error downloading PDF:", e);
		}
	});
